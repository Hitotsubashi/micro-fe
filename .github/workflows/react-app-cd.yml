name: React-App-CD
on:
  push:
    branches:
      - react-app-release
      - react-app-release-**
env:
  APP_PATH: sub-app/react-ts-app
jobs:
  # 导出Package.json中的数据
  ReadInfo:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ steps.read-info.outputs.name }}
      version: ${{ steps.read-info.outputs.version }}
    steps:
      # 拉取docker.json代码
      - name: Checkout repository
        uses: actions/checkout@v3
      # 读取package获取相关信息
      - name: Read Info
        id: read-info
        uses: jaywcjlove/github-action-package@main
        with:
          path: ${{ format('{0}/package.json',env.APP_PATH)}}
        run: |
          echo "name=${{ steps.read-info.outputs.name }}" >> $GITHUB_OUTPUT
          echo "version=${{ steps.read-info.outputs.version }}" >> $GITHUB_OUTPUT
  CD:
    runs-on: ubuntu-latest
    needs: ReadInfo
    env:
      Container: ${{needs.ReadInfo.outputs.name}}
      Image: ${{needs.ReadInfo.outputs.name}}:${{needs.ReadInfo.outputs.version}}
      ImageFile: ${{needs.ReadInfo.outputs.name}}.tar
      Release: ${{needs.ReadInfo.outputs.name}}/${{needs.ReadInfo.outputs.version}}
    steps:
      # 拉取代码
      - name: Checkout repository
        uses: actions/checkout@v3
      # 安装docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      # 基于package.json复制一个名为package-install.json的副本，且移除与install无关的信息
      - name: Make a duplicate Of package.json named package-install.json
        run: ${{ format('sed -e '/version/d' {0}/package.json {0}/package-install.json',env.APP_PATH)}}
      # 创建docker镜像
      - name: Build Docker Image
        uses: docker/build-push-action@v3
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{env.Image}}
          context: ${{env.APP_PATH}}
          load: true
      # 导出docker镜像文件
      - name: Export Image as Tar
        run: |
          docker images
          docker save ${{env.Image}} > ${{env.ImageFile}}
      # 创建Release版本且上传镜像文件
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.PROJECT_ACCESS_TOKEN }}
          tag_name: ${{ env.Release }}
          name: ${{ env.Release }}
          draft: false
          prerelease: false
          files: |
            ${{ env.ImageFile }}
      # 把镜像tar上传至生产服务器
      - name: Upload Image Tar to Deploy Server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_TOKEN }}
          ARGS: "-avzr --delete"
          SOURCE: ${{env.ImageFile}}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{secrets.REMOTE_USER}}
          TARGET: ${{secrets.TARGET}}
      # 登陆进生产服务器进行操作
      - name: Run Docker Container
        uses: appleboy/ssh-action@master
        env:
          Network: microfe
        with:
          host: ${{secrets.REMOTE_HOST}}
          username: ${{secrets.REMOTE_USER}}
          key: ${{ secrets.DEPLOY_TOKEN }}
          # 步骤：
          # 1. 停止移除容器
          # 2. 移除已有镜像
          # 3. 进入存放镜像文件的目录且把镜像文件转为镜像
          # 4. 检测若不存在microfe网络，则创建microfe网络
          # 5. 根据镜像创建且运行容器，且把容器接入到microfe网络
          # 6. 移除镜像文件
          script: |
            ${{ format('docker ps -q --filter "name={0}" | grep -q . && docker rm -f {0}', env.Container) }}
            ${{ format('docker rmi -f $(docker images -q  --filter reference="{0}")', env.Container) }}
            ${{ format('cd {0}' , secrets.TARGET)}}
            ${{ format('docker load < {0}', env.ImageFile)}}
            ${{ format('docker network ls -q --filter "name={0}" | grep -q . || docker network create {0}',env.Network)}}
            ${{ format('docker run -d --name {0} --network {1} {2}',env.Container,env.Network,env.Image)}}
            ${{ format('rm {0}',env.ImageFile)}}
